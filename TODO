
Jun 25, 2018:
-------------

### prismelmappers whose rgraphs have n_frames > 1 ###

It seems obvious that the resulting n_frames should be the product of mapper & mappee shapes.
...we could make it an attribute of prismelmapper: how to treat animation.
    Options:
        - mapper's animation happens once per frame of mappee's animation
        - mappee's animation happens once per frame of mapper's animation
        - mapper + mappee animate simultaneously  <-- this is the default, cos its easiest?..
...ah, but "mapper" is not a rendergraph, it's a mapper.
We could define mapper's n_frames as the LCD of its rendergraphs' n_frames.


Jun 27, 2018:
-------------

mapper l.blu_double: we're expecting to see light-coloured prismels turned to
    white, others turned to light blue.
    But everything is turned to light blue.
    Is that because our double_sq, double_tri are defined with dark blue?
    (performs an experiment) ...YES.
    Well, ok but why?..
    -> because of that recursive step: mappers end up seeing how things
        are composed, it's up to us to make sure they *behave* as if they
        only see the colors in their sub-shapes' rendered bitmaps.
    -> ok, so what's the fix?
        ...idunno, but take a look at that thing in prismelrenderer.c which
        says:
            /* TODO: think about this and make sure it's correct */
        ...it's probably not correct, eh.

        UPDATE: It's not correct. I did abstract algebra at it until
        its incorrectness was proven. T__T


Jun 30, 2018:
-------------

WHAT'S NEEDED FOR A PROPER DEMO:

    - Music + SFX. Almost anything will do for now.
    - Get rid of hexmap "unit": unit starts as (1 0 0 0) and only
        mappers change it.
        Then add a way in the map.fus files to specify mapper cache
        entries, and that's how tilesets with different units can
        co-exist within same worldmap?..
        Not that simple. There are no "vert", "edge" prismels.
        ...although we could add them, I suppose.
        Things get a little annoying, since we have to start adding
        single-"tri" versions of every tile (and player state??),
        and each mapper needs to have solid mappings for prismels
        tri, vert, edge.
        I guess the fus syntax would be:

            shapes:
                "tile1":
                    prismels:
                        # default, one-"tri" version:
                        : "tri" (0 0 0 0) 0 f  2
                        # ...or even have no prismels at all?..
                        # But having one-"tri" versions is maybe nice
                        # for e.g. a minimap
                    mappings:
                        "curvy":
                            # We're now defining the shape which
                            # will be used for map ("curvy") ("tile1")
                            prismels:
                                # etc
                        "double":
                            # ...


Dec 9, 2018:
------------

Something is weird about the "-2+" etc in the following:

    "spit_dead":
        animation: once 12
        shapes:
            : "dead_particle" (0 1 3 1) 1 f  0+ (0 6)
            : "dead_particle" (0 1 3 1) 3 f -2+ (2 6)
            : "dead_particle" (0 1 3 1) 6 f -3+ (3 6)
            : "dead_particle" (0 1 3 1) 9 f -5+ (5 6)

...I think those should all either be "0+" or the non-negative versions
of themselves (if you see what I mean).


Dec 10, 2018:
-------------

Actor recordings: if we get a fus format for ranges of frames, and a
half-decent tool for stepping through a recording (e.g. if player->keymap
>= 0 then the arrow keys control their recording, maybe left/right is
forward/back a frame, up/down jumps to start/end, action pauses/unpauses),
then we could specify on which frames the given rules of an actor state
should be run.


Dec 11, 2018:
-------------

Current objectives:

    * Improve "actors"...
        * better recording tools
            * play/pause, step forward/back
            * recording format: multiple "keyframes"
            * split recording into 2 (insert keyframe)
        * actor states have a pos
        * actor states run through ruleset on multiple frames
        * actor variables
        * special actions which affect map
            * e.g. make a "door" appear in water house
    * Diggable tiles?
    * Rideable birds?


Dec 17, 2018:
-------------

Palette transitions which are intended to be "instantaneous"
(e.g. if !game->smooth_scroll || game->reset_camera) actually lag
behind camera pos by 1 frame.


Dec 24, 2018:
-------------

Hardcoded "dead" anim: each stateset should be able to specify its
dead_anim_name, and if NULL, body can't die.

Currently spider -> roller transformation is kinda hacky

    * Can we make doors which are only visible to rollers? Too hacky!

    * Can we have doors better indicate their effect?
        E.g. after submap is loaded, if its door_stateset_filename is non-NULL,
        change it in some way, perhaps adding a body of the proper anim
        with no recording, so it just stands there showing you what you
        will become...

    * Perhaps we design the dodecas area such that rollers can't escape.
        That way we just need to add a "roller -> player" door somewhere
        within it.
        Like on the other side of a puzzle which can't be passed by
        spiders...
        It should be at the far left side where the other rollers are,
        so they act as a hint that you should head there as a roller!..
        THEY COULD BE ACTORS WHICH DETECT A FELLOW ROLLER ENTERING THE
        AREA!...
        *hyperventilating slightly*


Dec 31, 2018:
-------------

vars:

    Should be saved in recordings.
    So e.g. we can set vars of recordings in data/maps by editing the files.

    We want new getter/setter conds and effects:
        if:
            eval: get "x" < 3
            eval: get "name" == "joe"
            eval: get "is_active"
        then:
            set "x": get "x" + 1

    For "coll" cond with "bodies", we want something like:
        coll:
            bodies
            count: >= 3
            where: get his "x" < 3
            where: get his "name" == "joe"
            where: get his "group" == get my "group"
            where: get his "is_active" and: not get his "is_dead"
            ;; .....

    We also want some way for a state to affect other bodies:
        for bodies:
            where: get his "group" == get my "group"
            coll:
                ;; ....
        do:
            # If you only have 1 thing to do:
            set his "x": 3

            # If you have multiple things to do:
            : set his "x": 3
            : set my "guy": get his "name"

    Can we have a "do" block for each stateset, run when it's loaded?
    (So e.g. player/roller/whatever can have certain vars always set)

    TODO: How do we implement "crushing" with this?
        for bodies:
            where: get his "crushable"
            coll: ...
        do:
            set his state: "dead"

    We could implement "pickups" too, e.g.:
        for bodies:
            where: get his "uses_pickups"
            coll: ...
        do:
            : set his "heat": get his "heat" + 10
            : die


Sep 28, 2019:
-------------

MAPPERS: These should be generic. Mapped and mappee should both be void*...
And then have mapped_type and mappee_type, with some kind of enum whose
values are PALETTE, RGRAPH, MAPPER, etc.


Sep 29, 2019:
-------------

Don't use raw strdup, malloc, etc -- make sure these things are gonna perror
and exit() for you eh.

Use more water?.. e.g. in dodecas area?..
Add swimming_rollers... or some kind of water creatures...


Oct 3, 2019:
------------

COINS ARE FUN
Let's make different kinds of collectibles...
Little flies, berries, that kind of thing.
And place them on the maps.


Nov 2, 2019:
------------

    * Slightly extend "big roller" section at bottom-right of dodecas,
      then point one of its doors at a new "gauntlet" worldmap
    * Extend spidertown, many "layers" connected by doors, eventually
      wilderness, on other side is another spider settlement (with houses
      like the broken ones found in wilderness)
    * Wilderness: actually non-random, please.
      Or anyway, non-random version.
    * Roller follows you if you're a roller.
        * Use this to collect the rollers in dodecas, getting them
          to... open a door?.. sacrifice them to the dodecas spiders?..
        * If you go all the way up to spidertown as a roller, you can
          collect rollers up there, for some use or other.
          So we can hide rollers in various little out-of-the-way places
          which are currently unused.
            * If you're a spider and you go near these rollers, they could
              switch hiding-spots.
              Also we could stick some coins in some of these hiding spots.
    * Collecting coins does what?
      Make some nice "plants" with "berries", and make little "flies"...
    * Getting past the scary bird... gets you a powerup?.. frees the hermit?..


Nov 3, 2019:
------------

Trees: we have right-slanting trees... now also have left-slanting ones!..
E.g. one at bottom-right of current map.
Need to go through the water area at top to come around down other side of
the left-slanting tree.

Trees: the tiny trangles at top should be leaves, so get them appropriate rgraphs.
And maybe branches in a background layer.
And also... decide why they exist, where they lead etc.


Nov 7, 2019:
------------

water map: walled-in bubbles full of water, connected by tunnels?..
Giant rooms with suspended wall-less water bubbles?..
Inverted rooms filled with water but with suspended wall-less air bubbles?..
An enemy who swims faster than you, but you walk faster.
So you need to "land" to escape, and "landing" often involves tricky sequences
of jumping, doing some kind of turn while swimming, then landing again.


Mar 29, 2020:
-------------

* "Firefly" coins which fly around
* "Fruit/flower" coins which grow on little plants


May 17, 2020:
-------------

VALGRIND ISSUES:
    * hexmap_parse_submap: palette_filename
    * ...etc... JUST RUN THIS:
        valgrind --leak-check=full --track-origins=yes ./main 2>valgrind.log
    * So basically, a lot of fus_lexer strings are left lying around.
    * And a lot of X11 crap.
    * BUT ALSO:
        * calloc in console_init (console.c:28) in test_app_init (test_app.c:210)
        * calloc in console_init (console.c:32) in test_app_init (test_app.c:210)
        * And:
            ==4434==    at 0x4C2FA1E: calloc (vg_replace_malloc.c:711)
            ==4434==    by 0x413059: load_file (util.c:55)
            ==4434==    by 0x408DB9: _stateset_parse (anim.c:335)


Jun 15, 2020:
-------------

Keep it simple... I want more places to play in
Dodecas is probably my favourite, more like that plz.
Mix hexas + bigtris, birds + bigrollers.


Aug 2, 2020:
------------


Spit needs to eventually disappear on its own, otherwise spitting repeatedly into empty space eventually slows down the game
-> OK DONE, but watching list_bodies in the console, looks like dying doesn't actually remove a body.
    ...which probably makes sense sometimes?.. but for spit needs to be totally removed.
    Well anyway, not having a bunch of spit doing collision checks every frame should be an improvement, good enough for now.


GET WATER_ROLLER WORKING BETTERER
...then throw some in "water" map


Anything fun we can do with body->vars now that we can "inc" etc?..
E.g. collected "coins" are counted and can be... spent somehow.
Issue with that is our crappy "event system"...

    anim/coin.fus:
        on "collect": collected

    anim/player.fus:
        collmsgs: "collect"

...no way to get "code" to run for player when they actually collect something.
...errr wait, can we just have a corresponding "collectible" message sent by coin to player???
Ok ok, but even then, the only thing we can do when an event fires is a "goto".
We want an arbitrary state_effect_t.
I believe we want something like:

    anim/coin.fus:
        on "collect":
            goto immediate: collected

    anim/player.fus:
        collmsgs:
            "collect":
                inc: coins_collected

Question: how would we display e.g. that "coins_collected" variable?..
camera_render would check player's body's variables?..
Variables with a certain prefix are printed?..
Or stateset has a list of variables to be printed, and their labels?..

    anim/player.fus:

        display:
            int coins_collected
        collmsgs:
            "collect":
                inc: coins_collected
        on "crush":
            goto immediate: dead

        $SET_STR NS player_
        import "anim/_player.fus"


Can a body's vars be made to affect how its rgraph is rendered?..


SOMETHING FUN:
    Rollers can collect 1 "coin".
    Then they are seen to be carrying it.
    However, player can "steal" it by shooting or running into it.



Way from console to move to another map?
How about being able to respawn at arbitrary savepoints within current map?


When you get crushed, you respawn... but keep your current stateset, even if you had a different one
when your respawn point was last set!
So e.g. you can travel a long ways, and get a new body, and then keep that new body even
if you get crushed in it.
Which could ruin puzzles whose purpose is to go in somewhere, get a new body, and make it out alive...


Aug 4, 2020:
------------

* Beef up actors

* Better tools for recordings
    * Ok, we can now get a data dump with list_body. Cool!
    * How might we go about editing a recording?..
    * NOTE: we already have a (self-proclaimedly "ganky") way to start an animation from an arbitrary frame...
        * body_restart_recording (which looks at body->rec.offset)
        * Can we turn that into a simple "step forward/backward" feature?..
        * And mix that with... ability to scroll through the parts of recording's data (e.g. "+l", "w15") and edit them?
        * insert/delete/edit recording->nodes
        * WE DON'T WANT TO EDIT RAW DATA!!! We want to press keys, duhh.
            * So if you step backwards/forwards through the animation, you can record over it in any spot.
            * Yeah ok, but what if you want to record over one part and keep the next part?..
                * Well that would only work if you ended up in the exact same spot.
                * So that probably only makes sense for animations which are already split up into actors.


Aug 6, 2020:
------------

* Aiming up should be a "special ability" of some spider variant.
    * Or possibly... a "pickup"?.. one of few such pickups.
    * Another pickup: ABILITY TO VIEW THE MINIMAP (with tab)
        * This is per hexmap?.. so one minimap pickup per hexmap?..


Aug 23, 2020:
-------------

* MAKE AIPLAYER CUSTOMIZABLE
    * "timid" variant, doesn't make big jumps, can therefore be confined to e.g. left part of spidertown...
    * The chance percentages could be int vars...
    * Separate chances for running vs "running off the edge"?..

* airoller... aibigroller... etc


Aug 23, 2020:
-------------

* OMG birdplayer in jungle2.fus is amazing. You can run around & around the cave in the middle.
    * Add an area full of hexagons and birds.
    * Make it so when birdplayer is a bird, he's not crushed by birds.
        * Cheapo way to do it: when birdplayer is bird, he has no hitbox.
        So he neither crushes nor is crushed.
    * Have this area eventually combine with big triangles area.
    * Is there a "big_trangleplayer"?.. :P
    * Finish up anim/bubblecar.fus!..
    * jungle_aiplayer gets crushed by birds :'(
        * Add a special "invincible" thing to bodies?..
        * (Currently just implicit when body->recording is playing...)


Aug 25, 2020:
-------------

* Split geom_lexer.c off from geom.c?.. otherwise geom.c depends on lexer.c which is silly.

* Fix our weirdo "touching savepoint" code... these days we can save your anim+state+pos+rot+turn, so just use hitbox.


Aug 29, 2020:
-------------

* roller: after grab, stop until next "wentdown u"?..

Sep 1, 2020:
------------

* aiplayer jumps into walls & explodes sometimes. Not ideal.
* after you pass big_roller in triangles world, he goes "crazed" and comes after you?..
    * so we... have anim/_big_roller.fus and pass it an IS_CRAZED bool?.. :P
* use hexbox_t with hexcollmap_t so collmaptool can rotate maps!
    * then do so with wastes/start.fus, etc


Sep 5, 2020:
------------

* Need a way for rollers to get out of dodecas section without hexrollers doing so...
    * data/maps/demo/pebbles3.fus

* Spikeyplayer puzzle!.. there's one already (data/maps/trees/bubbles3-0.fus) where you become rollerplayer,
then become spikeyplayer, then can get through a place with 4 deathrollers.
If there's only 3 deathrollers, you can get through by waiting for a gap in them so you can safely
jump across a little gap & escape.
HOWEVER, even when there are 4, you can still escape if you spit at them and confuse them!
So that could be used somewhere...

* Roller movement:
    * While extended ("grabbing"), don't grab things on your long sides...
    that is,

        All 3 vertices are "sticky":

              +
             / \
           (+)- +

        Only the "tip" vertex is "sticky":

              + - +
             /   /
           (+)- +

    ...that still allows e.g. rolling over large gaps of this form:


        +   .   +   .   +

Sep 12, 2020:
-------------

Saw an aiplayer jump in from left, fly out top right, get stuck somewhere...
The AI bug in action?!?!
data/maps/wastes/start.fus


                /exit
               /
enter   +   .   .
   \
    \ .   .   .

    +   .   +

  + - +   +
       \
        +


Player 2 can't be crushed?!?!?!
(See bird on data/maps/wastes/start2.fus


** Need a way to make actors invincible -- we've got that hardcoded thing with recordings,
I want to replace that with an explicit thing, maybe can be set by a recording, but
if so, needs to last once recording stops and actor takes over
    * We already have rec->reacts, is that all we need?.. but make it body->reacts?..

** redo big_roller recording in triangles area!


** We need player->respawn_stateset_filename
    Don't we have this now?.. maybe it's just not used?..

** Render hexmap submaps' hexboxes for debugging purposes...
    * Instead of trying to render the outlines, we could e.g. render all tiles
        a solid colour while some button was held down?..

** map-level vars and "global" (game-level) vars.
    * Can be saved/loaded (i.e. in respawn.txt)
    * actors don't need to create a body!.. (this is already true)
        so if they had map/game-level vars to play with, we could start doing neat stuff
    * one var type stores bodies?.. so you can look up bodies by name... (per map?.. per game?..)
    * turn "visibility" of submaps on/off. And that can be saved/loaded (in respawn.txt).

** roller: still uses the old "turn" movement style while "u" is held??? (whlie "grabbing")


Oct 11, 2020:
-------------

* Goal of game: find spider town.
* Secondary/optional goal: "lead" the other spiders to spider town.
* Start of game: you can follow one of a number of other spiders, who guide/follow you through certain parts of the map.
    * The existing "guide" actor is for dodecas area...
    * One for "vines", "jungle"...
        * That guy will open the "hermit's hut" for you?? Or like... rescue the hermit??
    * One for tunnels...
        * Will show you to "pseudo" spidertown up top of demo map?.. and thence to trees?..
        * Actually maybe you meet someone partway through trees?..

* Extend trees worldmap at data/maps/trees/bubbles3-1.fus, going below-right, adding right-sloping tree.
    * Also: instead of trying to get this bubbles3-1.fus etc area "right", just copy-paste
    it a bunch (or make a bunch of similar things below it) -- remember why dodecas area is so fun!!


Nov 21, 2020:
-------------

* minieditor: F8 (reload) should *not* reset editor's properties?.. e.g. current rgraph.
    * ...but that might be hard, e.g. if you were looking at an rgraph who was dynamically
    generated (e.g. by a mapper being applied to something).
    At very least, we'd need to worry about rgraph's index changing, so we'd need to save
    its name, then reload, then look up that name again.

* I want it to be possible for hexmap_submaps (and maybe hexmaps) to change during gameplay.
    * E.g. switches
        * Flipped by spitting at them (finally, a use for spit!)
        * Can have effects on map, like toggling whether a certain submap is present
            * START WITH THIS, PROBABLY QUICK AND EASY
        * More interesting effects: editing a submap's tiles
        * Maybe coins can finally have a purpose?.. just as "keys" to open doors?.. but laaame
            * Still though, makes sense: "collect all coins in this room to progress" :P

        * Example use for switches: in trees/bubbles3-1.fus with the big_roller, would be cool
        to be able to flip a switch toggling existence of a "bridge" or "door" to some other
        area, so you can get rid of the big_roller.
        Except have multiple copies of the current structure (like, the "room" which the big_roller
        rolls around in and outside of) with slight differences, e.g. first one has 1 big_roller,
        next one has 2 big_rollers, maybe one has death_rollers, etc.
        And by flipping switches, you can cause all those enemies to move between the rooms.


Dec 7, 2020:
------------

NOW THAT MAPVARS ARE PART OF WHAT'S SAVED... save points should be activated if you changed
any mapvars????
(Not just if "the distance from your last savepoint is more than 3" or whatever we check now)
...so, we want a mapvars_diff function or something?
...oooof, no, because we're diffing against the contents of respawn_0.txt or whatever. GAH
...see hexgame_savelocation_{save,load}.
...properest solution is to add a "dict" of maps and their vars to hexgame_savelocation_t. :P

Respawning still doesn't restore your stateset to what it was?..
...sometimes it does... maybe I was confused one time?..

Triangles area: the prize is becoming a big_roller???
(Errrr, big_rollerplayer?..)


Dec 8, 2020:
------------

* Currently we have submap->visible_var_name.
Could we perhaps have submap->visible_cond instead?..
That lets us get a bit fancy, like:

    # Basic
    get_bool mapvar("blocker")
    not: get_bool mapvar("blocker")

    # Fancy
    expr: mapvar("lala") < 3

* HERMIT'S HOUSE
    * We can now have a door "appear" (by using a submap's "visible" thing)
    * So, in jungle area, let's say you "rescue" a spider from the right side
    * You lead/follow him back to hermit's entrace
    * He "opens" the door, goes in, disappears
    * If you go in, you're in maps/water, inside some stuff that's visible not accessible from outside
    * It's possible to sneak out of this place into some obstacle courses involving big_rollers and birds (?)
        * You may need to be spikey to survive this?
    * There are switches here which open stuff on the outside of the closed-in area
    * ...in other words, you can unlock a bunch of stuff, then go back into maps/water
        via the bottom-left part of jungle area

Ummmmmmmm you can shoot switches through walls?? Dang.


Dec 10, 2020:
-------------

Spidertown: current one is small -- "spider fort"?
Anyway, the real one should be similar but composed of maany of those circular structures
(see data/maps/test/map1.fus). But like... a whole field of them.
Randomize it?
Enhance collmaptool (or add hexmaptool, submaptool)?
Then we can use current random generation stuff, but then *save* the results,
and edit them by hand. Hand-curate, if you will.


Dec 11, 2020:
-------------

Currently impossible to return from vines area??

LOOK FURTHER INTO EMSCRIPTEN!!!
It actually seems to work really well.
But how can we e.g. stop window from scrolling when player hits arrow keys?..
And can we map the F* keys to something else?..

The big_roller who guards the entrance to maps/triangles tends to camp on the door. :P


Dec 21, 2020:
-------------

TINY GIF WRITERS!!!
Get yourself some viiiiideoooo
https://github.com/nothings/single_file_libs#images
* https://github.com/charlietangora/gif-h
* https://www.jonolick.com/home/gif-writer

Some kind of hexcollmap transformations... similar to mappers for rgraphs:
    "double":
        unit: 2 0 0 0
        entries:
            : vert -> collmap: ;; (+)
            : edge -> collmap: ;; (.)- + - .
            : face -> collmap:
                ;;      .
                ;;      *
                ;;    . - .
                ;;    *\*/*
                ;; (.)  .   .
...can we also map tile_c or whatever?.. the "colours"?..
Maybe:
    entries:
        : vert ->
            collmap: ;; (+)
            tiles:
                : "0" -> "1"
                ...etc...
...?


TIG FEEDBACK:
* "When your character is upside down the buttons don't flip so you can press left and move right,
press up and jump down. Also the goal wasn't clear: I was sort of chasing the other character that
was there at the beginning for a while and then I gave up on that b/c there was very little feedback."
    * So, maybe we need more standard menus including options for controls, including an option to
    flip controls based on your orientation?..
        * Could that even work?.. I think the best we could do would be to map jump/crouch to
        something other than up/down, to avoid confusion.
        * Maybe what we need is more of a tutorial.

collmaptool has --rot but no --flip!.. add it plz!


Dec 22, 2020:
-------------

TUTORIAL:
* spitting
* switches
* other creatures
* transformations
* coins (?.. what are they for?.. do we even bother to say?..)
* swimming (?.. or leave it a secret?..)


Dec 24, 2020:
-------------

* SAVING & LOADING THE GAME -- OVERHAUL:
    * The thing you save/load is called a "game"
        * Except we need a better technical term for it :P
    * Touching a save point saves the current game
    * Touching a door of type "new_game" starts a new game (so e.g. if you go to "NEW" on the title screen after having
        saved during the tutorial, you can't reload back into the tutorial)
    * The number of players is part of the game?..
    * In any case, only player 0 can use savepoints?.. other players respawn at player 0's location (or... last save point)?..


Dec 25, 2020:
-------------

* A system for changing the tile_c of entire swaths of tiles in a hexcollmap at the same time.
    * So, continue to create hexcollmaps as we do now, based on how they'll affect collisions...
    ...but have an easy way to add variety and colour to portions of the map, *independent* of its
    "shape" (collisionarily speaking).

* Have sections which use their own special states based on classic games??? "quote" those games?
    * Sonic
        * springs (both which send you jumping up -- where in our case "up" is subjective -- and which send you rolling sideways)
        * loop-the-loops etc -- can just use the kind already possible in geom
    * Mario: ???
    * Metroid: ???
    * Cave Story: ???

* Present the game as a series of puzzles, similar to tutorial
* Overlay that sequence with an open world, totally unexplained, like current demo map
* Some interaction between the "two games" (puzzler and open exploration)
    * E.g. a switch is part of a simple puzzle, but also opens a door in the open world
    * Or turning into a rollerplayer in open world, using that to blow past a numer of puzzles

* Add more prend stats besides just bitmaps_rendered!..
    * Add a struct prismelrenderer_stats?..

* Add a door_t property like "noscroll" so camera jumps along with your body!


Dec 26, 2020:
-------------

* One palette instance per filename!

* As well as "on" events, add an "always" handler which runs every frame?
    * Use for things like e.g. affecting the "lighting" (palette) based on distance from camera?..
    * Use for things like heat, thirst, etc?..
