

Jun 3, 2018:
------------

- reload + renderall crashes!
    run valgrind, maybe it will find something
    ...nope, it's happening in SDL dynamic lib somewhere...


Jun 14, 2018:
-------------

- prismelrenderer_parse.c:
    fus_lexer_get_{prismel,rendergraph,mapper} shouldn't take a "name" param?
    Maybe reintroduce the *_map objects?
    No: introduce "variable" objects.
    They don't own their shape/prismel/mapper, and the latter don't have names.
    ^... YES THIS


Jun 23, 2018:
-------------

hexmap_submap_t: if these don't share collmaps, just modify collmaps'
    ox, oy instead of messing around with submap's pos?..

COLLMAP INDICES NEED TO USE SAME Y COORDS AS TRF_T
    (currently they are vertically flipped and it ruins everything)


Jun 25, 2018:
-------------

### prismelmappers whose rgraphs have n_frames > 1 ###

It seems obvious that the resulting n_frames should be the product of mapper & mappee shapes.
...we could make it an attribute of prismelmapper: how to treat animation.
    Options:
        - mapper's animation happens once per frame of mappee's animation
        - mappee's animation happens once per frame of mapper's animation
        - mapper + mappee animate simultaneously  <-- this is the default, cos its easiest?..
...ah, but "mapper" is not a rendergraph, it's a mapper.
We could define mapper's n_frames as the LCD of its rendergraphs' n_frames.


Jun 27, 2018:
-------------

mapper l.blu_double: we're expecting to see light-coloured prismels turned to
    white, others turned to light blue.
    But everything is turned to light blue.
    Is that because our double_sq, double_tri are defined with dark blue?
    (performs an experiment) ...YES.
    Well, ok but why?..
    -> because of that recursive step: mappers end up seeing how things
        are composed, it's up to us to make sure they *behave* as if they
        only see the colors in their sub-shapes' rendered bitmaps.
    -> ok, so what's the fix?
        ...idunno, but take a look at that thing in prismelrenderer.c which
        says:
            /* TODO: think about this and make sure it's correct */
        ...it's probably not correct, eh.

        UPDATE: It's not correct. I did abstract algebra at it until
        its incorrectness was proven. T__T


Jun 30, 2018:
-------------

WHAT'S NEEDED FOR A PROPER DEMO:

    - Better camera scrolling / palette transitions.
    - Music + SFX. Almost anything will do for now.
    - Speed. Don't cache so much stuff...
        -> calculate bitmap bounds without creating surface,
            compare bounds against camera/screen to decide whether to
            bother rendering
    - Get rid of hexmap "unit": unit starts as (1 0 0 0) and only
        mappers change it.
        Then add a way in the map.fus files to specify mapper cache
        entries, and that's how tilesets with different units can
        co-exist within same worldmap?..
        Not that simple. There are no "vert", "edge" prismels.
        ...although we could add them, I suppose.
        Things get a little annoying, since we have to start adding
        single-"tri" versions of every tile (and player state??),
        and each mapper needs to have solid mappings for prismels
        tri, vert, edge.
        I guess the fus syntax would be:

            shapes:
                "tile1":
                    prismels:
                        # default, one-"tri" version:
                        : "tri" (0 0 0 0) 0 f  2
                        # ...or even have no prismels at all?..
                        # But having one-"tri" versions is maybe nice
                        # for e.g. a minimap
                    mappings:
                        "curvy":
                            # We're now defining the shape which
                            # will be used for map ("curvy") ("tile1")
                            prismels:
                                # etc
                        "double":
                            # ...

    - Title screen. (Maybe allow setting controls, save/load game,
        character select, multiplayer, etc.)
    - Detect player "death", auto respawn them somewhere useful.
        - Bring back "die" state effect?..
        - Can we abuse player->cooldown and have the "jump" state
            trigger death after some amount of time?
            -> I prefer allowing player to respawn whenever they like,
                and also letting them fly off into space as far as they
                "want".
                So, once exploded, dead=true, and a message can show
                at bottom of screen "you died, press 1 to respawn" or
                whatever, but players are free to fly off into space
                and wait for that message, to see if they'll actually
                land on something.



Instead of "import" in .fus files, we should maybe add "require", or anyway
    imports should be idempotent.
So all you do is specify worldmap, and it loads rgraphs as required.


July 12, 2018:
--------------

hexcollmap "parts":
    - need to realloc collmap1 as necessary for collmap2 to fit. (in hexcollmap_draw)
    - maybe below "parts" and "collmap" we can have a "draw" section where
        we specify collmap filenames and coordinates.
        It can reuse existing hexcollmap_draw.
        The coordinates can use int_fancy.
        We can add a "randint" thing to int_fancy.
        And then we will have Wilderness.

July 24, 2018:
--------------

* Add fus_lexer_cleanup()... need to go add it everywhere T___T

* audiotest REPL: recover from syntax errors plz

* audiotest REPL: push user input onto an array of strings so they can @def

* audiotest REPL: @triangle's "addinc" param needs to avoid the pop!..
    e.g. @triangle: 7500 1000 15000 addinc1(-1)

    -> ok we fixed the pop, but add it back as an operation somehow...
        Like @pop(...) - because sometimes it sounds good! Like a bass kick.
        What are its parameters?..

July 26, 2018:
--------------

We're at the point where all the SDL_Surface caching is dragging the computer
down to hell.
Add debugging first of all; then separate boundbox calculation from surface
rendering, and only render surfaces as they come into contact with the
screen's boundbox.

...ASK AND YE SHALL RECEIVE:

    * GEOM_HEXGAME_DEBUG_MALLOC
    * GEOM_DEBUG_RENDERING_RGRAPH
    * GEOM_ONLY_RENDER_CUR_SUBMAP

    ./compile_demo -DGEOM_HEXGAME_DEBUG_MALLOC -DGEOM_ONLY_RENDER_CUR_SUBMAP

        Initial load:
            Arena 0:
            system bytes     =   52518912
            in use bytes     =   48981472 # 49m
            Total (incl. mmap):
            system bytes     =   52518912
            in use bytes     =   48981472
            max mmap regions =          3
            max mmap bytes   =   19873792

        Loading all player surfaces:
            Arena 0:
            system bytes     =   52854784
            in use bytes     =   49419888 # .5m
            Total (incl. mmap):
            system bytes     =   52854784
            in use bytes     =   49419888
            max mmap regions =          3
            max mmap bytes   =   19873792

        Loading next submap (same prismelmapper):
            Arena 0:
            system bytes     =   64053248
            in use bytes     =   60519888 # 12m
            Total (incl. mmap):
            system bytes     =   64053248
            in use bytes     =   60519888
            max mmap regions =          3
            max mmap bytes   =   19873792

        Loading all player surfaces:
            Arena 0:
            system bytes     =   64053248
            in use bytes     =   60534560 # 14k (whaaa?.. just angles I never was at the first time?)
            Total (incl. mmap):
            system bytes     =   64053248
            in use bytes     =   60534560
            max mmap regions =          3
            max mmap bytes   =   19873792


    ./compile_demo -DGEOM_HEXGAME_DEBUG_MALLOC -DGEOM_ONLY_RENDER_CUR_SUBMAP

        Running around the whole worldmap:        
            Arena 0:
            system bytes     =  144302080
            in use bytes     =  140812384 # 140m
            Total (incl. mmap):
            system bytes     =  144302080
            in use bytes     =  140812384
            max mmap regions =          3
            max mmap bytes   =   19873792

    ./compile_demo -DGEOM_HEXGAME_DEBUG_MALLOC

        Running around the whole worldmap:        
            Arena 0:
            system bytes     = 1842372608
            in use bytes     = 1838830048 # 1.5g
            Total (incl. mmap):
            system bytes     = 1842372608
            in use bytes     = 1838830048
            max mmap regions =          3
            max mmap bytes   =   19873792


* Also: add option to render rgraphs directly to some other surface,
    without caching a rendergraph_bitmap->surface at all.
    (Compile with -D GEOM_RGRAPH_DONT_CACHE_BITMAPS)

    -> Try running the game like this and measuring RAM usage & speed


Aug 13, 2018:
-------------

    # BEFORE EARLY EXIT IMPLEMENTED:
    ./compile_demo -DGEOM_HEXGAME_DEBUG_MALLOC

        Initial load:
            Arena 0:
            system bytes     =  530796544
            in use bytes     =  527263296 # 527m
            Total (incl. mmap):
            system bytes     =  530796544
            in use bytes     =  527263296
            max mmap regions =          3
            max mmap bytes   =   19873792


    # AFTER EARLY EXIT IMPLEMENTED:
    ./compile_demo -DGEOM_HEXGAME_DEBUG_MALLOC

        Initial load:
            Arena 0:
            system bytes     =   74174464
            in use bytes     =   70669904 # 70m  (only 20m more than with -DGEOM_ONLY_RENDER_CUR_SUBMAP)
            Total (incl. mmap):
            system bytes     =   74174464
            in use bytes     =   70669904
            max mmap regions =          3
            max mmap bytes   =   19873792


