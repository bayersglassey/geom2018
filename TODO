

Jun 3, 2018:
------------

- reload + renderall crashes!
    run valgrind, maybe it will find something
    ...nope, it's happening in SDL dynamic lib somewhere...


Jun 23, 2018:
-------------

hexmap_submap_t: if these don't share collmaps, just modify collmaps'
    ox, oy instead of messing around with submap's pos?..

COLLMAP INDICES NEED TO USE SAME Y COORDS AS TRF_T
    (currently they are vertically flipped and it ruins everything)


Jun 25, 2018:
-------------

### prismelmappers whose rgraphs have n_frames > 1 ###

It seems obvious that the resulting n_frames should be the product of mapper & mappee shapes.
...we could make it an attribute of prismelmapper: how to treat animation.
    Options:
        - mapper's animation happens once per frame of mappee's animation
        - mappee's animation happens once per frame of mapper's animation
        - mapper + mappee animate simultaneously  <-- this is the default, cos its easiest?..
...ah, but "mapper" is not a rendergraph, it's a mapper.
We could define mapper's n_frames as the LCD of its rendergraphs' n_frames.


Jun 27, 2018:
-------------

mapper l.blu_double: we're expecting to see light-coloured prismels turned to
    white, others turned to light blue.
    But everything is turned to light blue.
    Is that because our double_sq, double_tri are defined with dark blue?
    (performs an experiment) ...YES.
    Well, ok but why?..
    -> because of that recursive step: mappers end up seeing how things
        are composed, it's up to us to make sure they *behave* as if they
        only see the colors in their sub-shapes' rendered bitmaps.
    -> ok, so what's the fix?
        ...idunno, but take a look at that thing in prismelrenderer.c which
        says:
            /* TODO: think about this and make sure it's correct */
        ...it's probably not correct, eh.

        UPDATE: It's not correct. I did abstract algebra at it until
        its incorrectness was proven. T__T


Jun 30, 2018:
-------------

WHAT'S NEEDED FOR A PROPER DEMO:

    - Music + SFX. Almost anything will do for now.
    - Get rid of hexmap "unit": unit starts as (1 0 0 0) and only
        mappers change it.
        Then add a way in the map.fus files to specify mapper cache
        entries, and that's how tilesets with different units can
        co-exist within same worldmap?..
        Not that simple. There are no "vert", "edge" prismels.
        ...although we could add them, I suppose.
        Things get a little annoying, since we have to start adding
        single-"tri" versions of every tile (and player state??),
        and each mapper needs to have solid mappings for prismels
        tri, vert, edge.
        I guess the fus syntax would be:

            shapes:
                "tile1":
                    prismels:
                        # default, one-"tri" version:
                        : "tri" (0 0 0 0) 0 f  2
                        # ...or even have no prismels at all?..
                        # But having one-"tri" versions is maybe nice
                        # for e.g. a minimap
                    mappings:
                        "curvy":
                            # We're now defining the shape which
                            # will be used for map ("curvy") ("tile1")
                            prismels:
                                # etc
                        "double":
                            # ...

    - Title screen. (Maybe allow setting controls, save/load game,
        character select, multiplayer, etc.)
    - Can we abuse player->cooldown and have the "jump" state
        trigger death after some amount of time?



Instead of "import" in .fus files, we should maybe add "require", or anyway
    imports should be idempotent.
So all you do is specify worldmap, and it loads rgraphs as required.


July 12, 2018:
--------------

hexcollmap "parts":
    - need to realloc collmap1 as necessary for collmap2 to fit. (in hexcollmap_draw)


Dec 9, 2018:
------------

Something is weird about the "-2+" etc in the following:

    "spit_dead":
        animation: once 12
        shapes:
            : "dead_particle" (0 1 3 1) 1 f  0+ (0 6)
            : "dead_particle" (0 1 3 1) 3 f -2+ (2 6)
            : "dead_particle" (0 1 3 1) 6 f -3+ (3 6)
            : "dead_particle" (0 1 3 1) 9 f -5+ (5 6)

...I think those should all either be "0+" or the non-negative versions
of themselves (if you see what I mean).


Dec 10, 2018:
-------------

Actor states should maybe come with a "pos" so we don't have to rely on
the position of the last recording to have played...

Actor recordings: if we get a fus format for ranges of frames, and a
half-decent tool for stepping through a recording (e.g. if player->keymap
>= 0 then the arrow keys control their recording, maybe left/right is
forward/back a frame, up/down jumps to start/end, action pauses/unpauses),
then we could specify on which frames the given rules of an actor state
should be run.


Dec 11, 2018:
-------------

Current objectives:

    * Improve "actors"...
        * better recording tools
            * play/pause, step forward/back
            * recording format: multiple "keyframes"
            * split recording into 2 (insert keyframe)
        * actor states have a pos
        * actor states run through ruleset on multiple frames
        * actor variables
        * special actions which affect map
            * e.g. make a "door" appear in water house
    * Diggable tiles?
    * Rideable birds?


Dec 17, 2018:
-------------

Palette transitions which are intended to be "instantaneous"
(e.g. if !game->smooth_scroll || game->reset_camera) actually lag
behind camera pos by 1 frame.


Dec 24, 2018:
-------------

We need player->respawn_stateset_filename

Hardcoded "dead" anim: each stateset should be able to specify its
dead_anim_name, and if NULL, body can't die.

Improve roller's "grab" so it can get around easier, particularly
the pebbles area

Currently spider -> roller transformation is kinda hacky

    * Can we make doors which are only visible to rollers? Too hacky!

    * Can we have doors better indicate their effect?
        E.g. after submap is loaded, if its door_anim_filename is non-NULL,
        change it in some way, perhaps adding a body of the proper anim
        with no recording, so it just stands there showing you what you
        will become...

    * Perhaps we design the dodecas area such that rollers can't escape.
        That way we just need to add a "roller -> player" door somewhere
        within it.
        Like on the other side of a puzzle which can't be passed by
        spiders...
        It should be at the far left side where the other rollers are,
        so they act as a hint that you should head there as a roller!..
        THEY COULD BE ACTORS WHICH DETECT A FELLOW ROLLER ENTERING THE
        AREA!...
        *hyperventilating slightly*


Dec 31, 2018:
-------------

vars:

    Should be saved in recordings.
    So e.g. we can set vars of recordings in data/maps by editing the files.

    We want new getter/setter conds and effects:
        if:
            eval: get "x" < 3
            eval: get "name" == "joe"
            eval: get "is_active"
        then:
            set "x": get "x" + 1

    For "coll" cond with "bodies", we want something like:
        coll:
            bodies
            count: >= 3
            where: get his "x" < 3
            where: get his "name" == "joe"
            where: get his "group" == get my "group"
            where: get his "is_active" and: not get his "is_dead"
            ;; .....

    We also want some way for a state to affect other bodies:
        for bodies:
            where: get his "group" == get my "group"
            coll:
                ;; ....
        do:
            # If you only have 1 thing to do:
            set his "x": 3

            # If you have multiple things to do:
            : set his "x": 3
            : set my "guy": get his "name"

    Can we have a "do" block for each stateset, run when it's loaded?
    (So e.g. player/roller/whatever can have certain vars always set)

    TODO: How do we implement "crushing" with this?
        for bodies:
            where: get his "crushable"
            coll: ...
        do:
            set his state: "dead"

    We could implement "pickups" too, e.g.:
        for bodies:
            where: get his "uses_pickups"
            coll: ...
        do:
            : set his "heat": get his "heat" + 10
            : die


Sep 28, 2019:
-------------

MAPPERS: These should be generic. Mapped and mappee should both be void*...
And then have mapped_type and mappee_type, with some kind of enum whose
values are PALETTE, RGRAPH, MAPPER, etc.


Sep 29, 2019:
-------------

Don't use raw strdup, malloc, etc -- make sure these things are gonna perror
and exit() for you eh.

Use more water?.. e.g. in dodecas area?..
Add swimming_rollers... or some kind of water creatures...


Oct 3, 2019:
------------

COINS ARE FUN
Let's make different kinds of collectibles...
Little flies, berries, that kind of thing.
And place them on the maps.


Oct 8, 2019:
------------

Figure out what's making it so slow having lots of bodies.
Collision? Collmap collisions specifically? Etc.

Add between-frames for (un)crouching?..


Oct 13, 2019:
-------------

TEST_APP.C: INSTEAD OF USING FONT_PRINTF, USE A BLITTER.
Our current approach with line_y is relying on a bug in geomfont_putc
or whatever: x0, y0 are being multiplied by vectors.
(So also TODO: fix that bug.)


Area full of big rollers.
Basic theme is big triangles like this:
     +
    / \
   + - +
  / \ / \
 + - + - +


Nov 2, 2019:
------------

    * Slightly extend "big roller" section at bottom-right of dodecas,
      then point one of its doors at a new "gauntlet" worldmap
    * Extend spidertown, many "layers" connected by doors, eventually
      wilderness, on other side is another spider settlement (with houses
      like the broken ones found in wilderness)
    * Wilderness: actually non-random, please.
      Or anyway, non-random version.
    * Roller follows you if you're a roller.
        * Use this to collect the rollers in dodecas, getting them
          to... open a door?.. sacrifice them to the dodecas spiders?..
        * If you go all the way up to spidertown as a roller, you can
          collect rollers up there, for some use or other.
          So we can hide rollers in various little out-of-the-way places
          which are currently unused.
            * If you're a spider and you go near these rollers, they could
              switch hiding-spots.
              Also we could stick some coins in some of these hiding spots.
    * Collecting coins does what?
      Make some nice "plants" with "berries", and make little "flies"...
    * Getting past the scary bird... gets you a powerup?.. frees the hermit?..


Nov 3, 2019:
------------

Spikey spiders???
Can't aim up, giving people a reason to figure out how to traverse maps
without angled-up jumps!
Maybe can't even spit?.. but on the other hand is invincible and maybe
even crushes other stuff?..

Trees: we have right-slanting trees... now also have left-slanting ones!..
E.g. one at bottom-right of current map.
Need to go through the water area at top to come around down other side of
the left-slanting tree.

Trees: the tiny trangles at top should be leaves, so get them appropriate rgraphs.
And maybe branches in a background layer.
And also... decide why they exist, where they lead etc.


Nov 7, 2019:
------------

water map: walled-in bubbles full of water, connected by tunnels?..
Giant rooms with suspended wall-less water bubbles?..
Inverted rooms filled with water but with suspended wall-less air bubbles?..
An enemy who swims faster than you, but you walk faster.
So you need to "land" to escape, and "landing" often involves tricky sequences
of jumping, doing some kind of turn while swimming, then landing again.


Mar 29, 2020:
-------------

* Beef up actors

* Better tools for recordings
    * Ok, we can now get a data dump with list_body. Cool!
    * How might we go about editing a recording?..
    * For one thing, we have pause/unpause (F5) and step (PgDn), so it would
    be cool if while paused you could see body's keyinfo in realtime.
    * Hmmm, currently we have it so console steals your keypresses while paused.
    * Can we find a clever way to make that optional?..
        -> DONE (ctrl+F5)

* list_submaps: add an option to jump the camera there?

* list_bodies: Can we plz add something like rendering a rect around currently selected body?
    * Or even: set app->camera->body to currently selected body?.. too crazy?..

* Auto resize map if .fus file's collmap data requires it
* Maps should be 6-sided, not 4-sided
    * Render the border for debugging purposes

* "Firefly" coins which fly around
* "Fruit/flower" coins which grow on little plants


May 17, 2020:
-------------

VALGRIND ISSUES:
    * hexmap_parse_submap: palette_filename
    * ...etc... JUST RUN THIS:
        valgrind --leak-check=full --track-origins=yes ./main 2>valgrind.log
    * So basically, a lot of fus_lexer strings are left lying around.
    * And a lot of X11 crap.
    * BUT ALSO:
        * calloc in console_init (console.c:28) in test_app_init (test_app.c:210)
        * calloc in console_init (console.c:32) in test_app_init (test_app.c:210)
        * And:
            ==4434==    at 0x4C2FA1E: calloc (vg_replace_malloc.c:711)
            ==4434==    by 0x413059: load_file (util.c:55)
            ==4434==    by 0x408DB9: _stateset_parse (anim.c:335)


Jun 15, 2020:
-------------

Keep it simple... I want more places to play in
Dodecas is probably my favourite, more like that plz.
Mix hexas + bigtris, birds + bigrollers.


Aug 2, 2020:
------------


Need to be able to auto-generate a minimap (and dump to .bmp etc)


Spit needs to eventually disappear on its own, otherwise spitting repeatedly into empty space eventually slows down the game
-> OK DONE, but watching list_bodies in the console, looks like dying doesn't actually remove a body.
    ...which probably makes sense sometimes?.. but for spit needs to be totally removed.
    Well anyway, not having a bunch of spit doing collision checks every frame should be an improvement, good enough for now.


GET WATER_ROLLER WORKING BETTERER
...then throw some in "water" map


Anything fun we can do with body->vars now that we can "inc" etc?..
E.g. collected "coins" are counted and can be... spent somehow.
Issue with that is our crappy "event system"...

    anim/coin.fus:
        on "collect": collected

    anim/player.fus:
        collmsgs: "collect"

...no way to get "code" to run for player when they actually collect something.
...errr wait, can we just have a corresponding "collectible" message sent by coin to player???
Ok ok, but even then, the only thing we can do when an event fires is a "goto".
We want an arbitrary state_effect_t.
I believe we want something like:

    anim/coin.fus:
        on "collect":
            goto immediate: collected

    anim/player.fus:
        collmsgs:
            "collect":
                inc: coins_collected

Question: how would we display e.g. that "coins_collected" variable?..
camera_render would check player's body's variables?..
Variables with a certain prefix are printed?..
Or stateset has a list of variables to be printed, and their labels?..

    anim/player.fus:

        display:
            int coins_collected
        collmsgs:
            "collect":
                inc: coins_collected
        on "crush":
            goto immediate: dead

        $SET_BOOL PLAYER_CAN_LOOK_UP
        $SET_STR NS player_
        import "anim/_player.fus"


Can a body's vars be made to affect how its rgraph is rendered?..


SOMETHING FUN:
    Rollers can collect 1 "coin".
    Then they are seen to be carrying it.
    However, player can "steal" it by shooting or running into it.

