
$SET_STR STATE_STEP step
$SET_STR STATE_STEP_UP step_up
$SET_STR STATE_STEP_DOWN step_down
$SET_STR STATE_START_JUMP start_jump
$SET_STR STATE_RUN_STEP step
$SET_STR STATE_RUN_STEP_UP step_up
$SET_STR STATE_RUN_STEP_DOWN step_down
$SET_STR STATE_RUN_START_JUMP start_jump

$SET_BOOL NO_COLLECT_ON_TOUCH


on "crush": goto: "dead"

import "anim/_coin.behaviour.fus"

state "_crouch":
    if() then: goto: "crawl"

state "_stand":
    if() then: goto: "stand"

state "appear":
    rgraph: "dead_once_reversed"
    if() then: goto: "stand"

state "stand":
    rgraph: "coin_beast_stand"
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .

    # Crawling, turning
    import "anim/_walker_stand.state.fus"

    # Stepping and jumping
    import "anim/_walker_jump.state.fus"
    import "anim/_walker_step.state.fus"

state "turn":
    rgraph: "coin_beast_turn"
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .

    # Crawling, turning, jumping
    import "anim/_walker_stand.state.fus"
    import "anim/_walker_jump.state.fus"

    if() then: goto: "stand"

state "step":
    rgraph: "coin_beast_step"
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .

    # Crawling, turning, jumping
    import "anim/_walker_stand.state.fus"
    import "anim/_walker_jump.state.fus"

    if() then: goto: "stand"

state "step_up":
    rgraph: "coin_beast_step_up"
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .

    # Crawling, turning, jumping
    import "anim/_walker_stand.state.fus"
    import "anim/_walker_jump.state.fus"

    if() then: goto: "stand"

state "step_down":
    rgraph: "coin_beast_step_down"
    hitbox:
        ;;   .   .   .
        ;;   *\*/*\*/*
        ;; . - + - . - .
        ;;   */*\*/*\*
        ;;   .  (.)  .

    # Crawling, turning, jumping
    import "anim/_walker_stand.state.fus"
    import "anim/_walker_jump.state.fus"

    if() then: goto: "stand"

state "appear_crouch":
    rgraph: "dead_once_crouch_reversed"
    if() then: goto: "crawl"

state "crawling":
    rgraph: "coin_beast_crawling"
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .
    if() then: goto: "crawl"

state "crawl":
    rgraph: "coin_beast_crawl"
    hitbox:
        ;;     .
        ;;     *
        ;;  (.)  .

    # Uncrawl
    if:
        key: not isdown d
        coll: all no
            ;;   .   .
            ;;   *\*/*
            ;; . - + - .
            ;;   */ \*
            ;;  (.)  .
    then:
        goto delay: "uncrawling"

    # Crawling
    import "anim/_walker_crawl.state.fus"

    # Turn
    if:
        key: wasdown b
    then:
        move: 1 0
        turn
        delay: 1

state "crawl_step":
    rgraph: "coin_beast_crawl_step"
    hitbox:
        ;;    .   .
        ;;      */*
        ;;     (.)  .
    if() then: goto: "crawl"

state "crawl_step_down":
    rgraph: "coin_beast_crawl_step_down"
    hitbox:
        ;;    .   .
        ;;    *\*/*
        ;;  . -(.)  .
    if() then: goto: "crawl"

state "uncrawling":
    rgraph: "coin_beast_uncrawling"
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .
    if() then: goto: "stand"

state "start_jump":
    if() then:
        goto: "jump"
        delay: 2

state "jump":
    rgraph: "coin_beast_jump"
    unsafe
    hitbox:
        ;;   .   .
        ;;   *\*/*
        ;; . - + - .
        ;;   */*\*
        ;;  (.)  .

    # Landing, jumping, crashing
    import "anim/_walker_jumping.state.fus"

state "collected":
    rgraph: "dead_once"
    unsafe
    if() then:
        # Do whatever it is coin-like things do while they've been collected...
        call: "while_collected"
        continue
    if() then: die

state "mostly_dead":
    rgraph: "dead_cycle"
    unsafe
    if() then: die mostly

state "dead":
    rgraph: "dead_cycle"
    unsafe
    if() then: die
