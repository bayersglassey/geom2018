

Jun 3, 2018:
------------

- reload + renderall crashes!
    run valgrind, maybe it will find something
    ...nope, it's happening in SDL dynamic lib somewhere...
- fus_lexer: Leaving closing quote off a string literal doesn't seem
    to cause an issue?..
    (With the console input of main_sdl.c)


Jun 9, 2018:
------------

- review uses of RLE
    RLEDestFormat - we keep running into undefined reads of these...
    Specifically as a result of SDL_CreateTextureFromSurface...
    Look at SDL source, figure out wtf is going on

    Theory: we can recreate the bug by creating a surface, blitting it onto
    something else, then creating a texture from it.
        ...nope, didn't work :|


Jun 14, 2018:
-------------

- prismelrenderer_parse.c:
    fus_lexer_get_{prismel,rendergraph,mapper} shouldn't take a "name" param?
    Maybe reintroduce the *_map objects?
    No: introduce "variable" objects.
    They don't own their shape/prismel/mapper, and the latter don't have names.
    ^... YES THIS


Jun 23, 2018:
-------------

hexmap_submap_t: if these don't share collmaps, just modify collmaps'
    ox, oy instead of messing around with submap's pos?..

COLLMAP INDICES NEED TO USE SAME Y COORDS AS TRF_T
    (currently they are vertically flipped and it ruins everything)


Jun 25, 2018:
-------------

### prismelmappers whose rgraphs have n_frames > 1 ###

It seems obvious that the resulting n_frames should be the product of mapper & mappee shapes.
...we could make it an attribute of prismelmapper: how to treat animation.
    Options:
        - mapper's animation happens once per frame of mappee's animation
        - mappee's animation happens once per frame of mapper's animation
        - mapper + mappee animate simultaneously  <-- this is the default, cos its easiest?..
...ah, but "mapper" is not a rendergraph, it's a mapper.
We could define mapper's n_frames as the LCD of its rendergraphs' n_frames.


Standardize all fus_lexer stuff to leave lexer looking at NEXT UNPARSED TOKEN.


Jun 27, 2018:
-------------

mapper l.blu_double: we're expecting to see light-coloured prismels turned to
    white, others turned to light blue.
    But everything is turned to light blue.
    Is that because our double_sq, double_tri are defined with dark blue?
    (performs an experiment) ...YES.
    Well, ok but why?..
    -> because of that recursive step: mappers end up seeing how things
        are composed, it's up to us to make sure they *behave* as if they
        only see the colors in their sub-shapes' rendered bitmaps.
    -> ok, so what's the fix?
        ...idunno, but take a look at that thing in prismelrenderer.c which
        says:
            /* TODO: think about this and make sure it's correct */
        ...it's probably not correct, eh.

        UPDATE: It's not correct. I did abstract algebra at it until
        its incorrectness was proven. T__T


Jun 30, 2018:
-------------

Add hexmap_tileset_t, move rgraph_{verts,edges,faces} from hexmap_t onto it.
Tilemaps are another named thing on prismelrenderer.
Then each map.fus can say at the top:

    tileset: "data/tileset1.fus"

...or whatever.


WHAT'S NEEDED FOR A PROPER DEMO:

    - Better map.
    - More customizability for areas (mapper, rgraph_verts/edges/faces,
        maybe stateset).
    - Better camera scrolling.
    - Title screen. (Maybe allow setting controls, save/load game,
        character select, multiplayer, etc.)



